Summary: C++ Development Library and Engine for the FIX protocol
Name: fix8
%define fullversion @VERSION@
Prefix: %{_prefix}
Version: @VERSION@
Release: @BUILD_NUMBER_DATE@
License: LGPL
Group: Development/Libraries
URL: http://www.fix8.org
Vendor: David L. Dight
Source: https://github.com/fix8/fix8/archive/%{name}-%{fullversion}.tar.gz
Buildroot: %{_tmppath}/%{name}-%{version}-%{release}-root

Requires: poco-net >= 1.4
Requires: poco-foundation >= 1.4
BuildRequires: poco-devel >= 1.4
BuildRequires: perl-XML-Parser
#ExcludeArch: %{arm}

%description
A modern open source C++ FIX framework featuring complete schema driven customisation, high
performance and fast application development.

Fix8 helps you get your FIX protocol client or server up and running quickly. Using one of the standard FIX schemas you
can have a FIX client or server up and running in next to no time.
Statically compile your FIX xml schema and quickly build your FIX application on top. If you need to add customised
messages or fields, simply update the schema and recompile.
Fix8 is the fastest C++ Open Source FIX framework. Our testing shows that Fix8 is on average 68% faster encoding/decoding
the same message than Quickfix.
Fix8 supports standard `FIX4.X` to `FIX5.X` and `FIXT1.X`. If you have a custom FIX variant Fix8 can use that too.
New FIX versions will be supported.
Fix8 offers message recycling and a meta-data aware test harness. Incorporates lock free queues, atomics and many
other modern techniques.
Fix8 contains a built-in unit test framework that's being continually revised and extended. Fix8 also has a metadata
driven test harness that can be scripted to support captured or canned data playback.
Fix8 is a complete C++ FIX framework, with client/server session and connection classes (including SSL); support for
the standard FIX field types; FIX printer, async logger, async message persister and XML configuration classes.
Fix8 statically supports nested components and groups to any depth. The Fix8 compiler and runtime library takes the
pain out of using repeating groups.
Leverage standard components. Fix8 optionally uses industry recognised components for many important functions,
including Poco, TBB, Redis, Memcached, BerkeleyDB, Fastflow, Google Test, Google Performance Tools, Doxygen
and more. We didn't reinvent the wheel.
Fix8 applications are fast. On production level hardware, client NewOrderSingle encode latency is now 2.1us, and
ExecutionReport decode 3.2us. Without the framework overhead, NewOrderSingle encode latency is 1.4us. This is being continually improved.
Fix8 has been designed to be extended, customised or enhanced. If you have special requirements, Fix8 provides a
flexible platform to develop your application on.
Fix8 supports field and value domain validation, mandatory/optional field assertion, field ordering, well-formedness
testing, retransmission and standard session semantics.
Fix8 runs under industry standard Linux on IA32, x86-64, Itanium, PowerPC and ARMv7. It also now runs on *Windows*
and *OSX*. Other *NIX variants may work too.

%prep
%setup -n %{name}-%{version}

%build
%configure --with-sleep=250 --enable-gtest=no --enable-doxygen-warnings=no
%{__make}

%install
%make_install

%clean
%{__rm} -rf $RPM_BUILD_ROOT

%files
%defattr(-,root,root,0755)
%{_bindir}/f8c
%{_bindir}/f8print
%{_bindir}/f8test
%{_bindir}/harness
%{_bindir}/hfprint
%{_bindir}/seqedit
%{_bindir}/hftest
%{_libdir}/libfix8.la
%{_libdir}/libfix8.so
%{_libdir}/libfix8.so.1
%{_libdir}/libfix8.so.1.0.3
%{_libdir}/libhftest.la
%{_libdir}/libhftest.so
%{_libdir}/libhftest.so.0
%{_libdir}/libhftest.so.0.0.0
%{_libdir}/libmyfix.la
%{_libdir}/libmyfix.so
%{_libdir}/libmyfix.so.0
%{_libdir}/libmyfix.so.0.0.0
%{_exec_prefix}/include/fix8
%{_exec_prefix}/share/fix8

%changelog
@CHANGELOG@

